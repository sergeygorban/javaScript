/*
Мы уже видели, что значение переменной this зависит от вызываемого контекста (как и в других объектно-ориентированных
языках). Но JavaScript позволяет определять, к чему привязана переменная this, независимо от того, как или где
вызывается рассматриваемая функция.

*/

// Метод call. Позволяет вызывать функцию с определенным значением this --------------------------------------------

const bruce = {name: "Bruce"} ;
const madeline = {name: "Madeline"};

function greet(){
    return `Привет! Меня зовут ${this.name}!`
}

greet();
greet.call(bruce);
greet.call(madeline);
// Как можно заметить, метод call позволяет вызывать функцию, как будто это метод, предоставляемый объектом, к которому
// привязана переменная this. Первый аргумент метода call - это значение, к которому вы хотите привязать this, а все
// остальные аргументы становятся аргументами вызываемой функции.

const bruce = {name: "Bruce"} ;
const madeline = {name: "Madeline"};

function update(name,age){
    this.name = name;
    this.age = age;
}

update.call(bruce,"Самогонщик", 124);

const newBruce = ["Самогонщик", 1024];
update.call(bruce, ...newBruce);

//--------------------------------------------------------------------------------------------------------------------

//Метод apply. Полезен, если у вас есть массив и вы хотите использовать его значения как аргументы функции.
// Классический пример - поиск минимального или максимального числа в массиве.

const sa = [-2, 0, 23, -23, 142];

Math.max.apply(null,sa);

//--------------------------------------------------------------------------------------------------------------------

//Метод bind. Позволяет определить значение для переменной this. Функция bind позволяет перманентно ассоциировать
// значение для this с функцией.

const bruce1 = {name: "Bruce"} ;
const madeline1 = {name: "Madeline"};

function update(name,age){
    this.name = name;
    this.age = age;
}

const newBruce = update.bind(bruce1);
newBruce("Самогонщик", 365);
newBruce.call(madeline1, "Сэм", 365); // madeline1 игнорируется




