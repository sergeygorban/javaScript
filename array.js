/*
Массивы (array) в JavaScript - это объекты специального типа. В отличие от обычных объектов содержимое массива
упорядочено (элемент О всегда следует перед элементом 1), а ключи являются числовыми и последовательными. Массивы
поддерживают много полезных методов, делающих этот тип данных чрезвычайно мощным средством выражения информации.

Массивы в JavaScript обладают следующими свойствами:
    • Размер массива не ограничен; вы можете добавлять и удалять элементы в любое время.
    • Массивы не являются гомогенными; каждый индивидуальный элемент может иметь любой тип.
    • Элементы массива нумеруются от нуля. Таким образом, первый элемент в массиве - элемент 0.

Прежде чем продолжить, давайте вспомним об основах массивов. Массивы (в отличие от объектов) имеют упорядоченный
характер, а числовые индексы их элементов отсчитываются от нуля. Массивы в JavaScript могут быть негомогенными, т.е.
их элементы не обязаны иметь одинаковый тип (из этого следует, что элементами массивов могут быть друrие массивы или
объекты). Литеральные массивы создаются с помощью квадратных скобок, и те же квадратные скобки используются для
доступа к элементам массива по индексу. Каждый массив имеет свойство length, указывающее количество элементов в массиве.
Присвоение значения по индексу, превосходящему размер массива, автоматически приводит к увеличению массива, а
неиспользуемые индексы получают значение undef ined. Для создания массива можно также использовать конструктор Array,
хотя это редко необходимо.

*/


//Создание массива --------------------------------------------------------------------------------------------

const arr1 = [1, 2, 3, 4];
const arr2 = [1, 'two', 3, null];
const arr3 = [[1,2,3], ["Yes", 2]];
const arr4 = [
    {a: "Yes", b: "No"},
    [
        {a: "Yes", b: "No"},
        {a: "Yes", b: "No"}
    ],
    234,
    function () {
        return "Функция"
    },
    "Yes"
];

//Создание массива из нескольких строк
const a3 = [
    "What the hammer? What the chain?",
    "In what furnace was thy brain?",
    "What the anvil ? What dread grasp",
    "Dare its deadly terrors clasp?"
];

//Создание массива из объектов
const a4 = [
    {name: "Ruby", hardness: 9},
    {name: "Ruby1", hardness: 45},
    {name: "Ruby2", hardness: 23}
];

//Создание массива, содержащего массив
const a5 = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];
//----------------------------------------------------------------------------------------------------------------

//Доступ к элементам

arr1[0];    // 1
arr1[2];    // 3
arr3[1];    // "Yes", 2
arr4[1][0]; // a: "Yes", b: "No"

//Длина массива

arr1.length; //4
arr4[1].length; //2

// Увеличение размера массива

arr1[5] = 5;
arr1;


// При доступе (не присвоении) по индексу, большему, чем есть в массиве, размер массива *не* изменяется

arr1[10];
arr1;


//Перезапись элемента массива
const arr2 = ['a', 'b', 'c'];
arr2[0] = 234;
arr2[0];

// Преобразование в строку
const ar = [1, true, "hello"];
ar.toString();

// Метод push() - добавляет эдемент в конец массива

const array = [1,2,3,4];
array.push(5);
console.log(array);

// Метод pop() - удаляет последний элемент в массиве

const array1 = [1,2,3,4];
array1.pop();
console.log(array1);

//Метод unshift - добавляет элемент в начало массива

const array2 = [1,2,3,4];
array2.unshift(5);
console.log(array2);

//Метод shift - удаляет первый элемент в массиве

const array3 = [1,2,3,4];
array3.shift();
console.log(array3);

// Метод concat - добавление нескольких элементов в конец массива и возвращает копию массива-----------------------

const array4 = [1,2,3];
console.log(array4.concat(4,5,6));
console.log(array4);

//Если передать методу concat массивы, он разделит их и добавит их элементы в исходный массив.
console.log(array4.concat([4,5,6]));

console.log(array4.concat([4,5],6));

//Обратите внимание, что concat разделяет массивы, предоставленные только непосредственно; он не разделяет массивы в
// этих массивах.
console.log(array4.concat([4, [5,6],7]));
//-----------------------------------------------------------------------------------------------------------------

// Метод slice() - получение подмассива из массива. Первый аргумент - индекс начала подмассива, а второй - индекс его
// конца (не включая указанный элемент). Этот метод позволяет использовать отрицательные индексы для ссылки на элементы
// относительно конца массива, что весьма удобно. Исходный массив не изменяется

const z = [1,2,3,4,5];

console.log(z.slice(3));

console.log(z.slice(2,4));

console.log(z.slice(-2));

console.log(z.slice(1, -2));

console.log(z.slice(-2,-1));

// Метод splice() - изменение массива. Первый аргумент - индекс, с которого должно начинаться изменение;
// второй аргумент - количество удаляемых элементов (если вы не хотите удалять элементы, используйте О), а
// остальные аргументы - это добавляемые элементы.

const z1 = [1,5,7];
z1.splice(1,0,2,3,4);
console.log(z1);

z1.splice(5,0,6);
console.log(z1);

z1.splice(1,2);
console.log(z1);

z1.splice(2,1,'a','b');
console.log(z1);

// Метод copyWithin() - получает последовательность элементов из массива, и копирует по месту, в другую часть массива,
// переписывая любые находящиеся там элементы. Первый аргумент - откуда копировать, второй аргумент - куда копировать,
// а заключительный (необязательный) аргумент - где прекратить копирование. Как и в методе slice, вы можете использовать
// отрицательные числа для индексов начала и завершения; они рассчитываются от конца массива.
