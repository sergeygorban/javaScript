/*
Область видимости (scope) устанавливает, где и когда определяются переменные, константы и аргументы.

Мы также принимаем как очевидное, что переменные и константы не существуют, пока мы их не создадим. Таким образом,
они не находятся в области видимости, пока мы не объявляем их с ключевым словом let или const

Область видимости (или видимость (visiЬility)) относится к идентификаторам, которые в настоящее время видимы и доступны
выполняющейся в данный момент части программы (называемой контекстом выполнения (execution context)).
Существование, напротив, относится к идентификаторам, которые содержат нечто, для чего была распределена
(т.е. зарезервирована) область памяти.

Когда нечто прекращает существовать, JavaScript не обязательно освобождает память сразу же: она просто помечается как
не используемая и освобождается только при периодически запускаемом процессе сборки мусора (garbage collection). Сборка
мусора в JavaScript осуществляется автоматически и будет вас интересовать только в определенных чрезвычайно
требовательных приложениях.

ЛЕКСИЧЕСКАЯ И ДИНАМИЧЕСКАЯ ОБЛАСТЬ ВИДИМОСТИ

Области видимости в JavaScript являются лексическими, а значит, можно определить, какие переменные находятся в области
видимости, просто посмотрев на исходный код.
Лексическая область видимости означает, что в области видимости функции находятся только те переменные, которые были
определены до момента определения самой функции (не путать с моментом ее вызова).

Рассмотрим пример.
const х = 3;
function f(){
console.log(x); // это сработает
console.log(y); // а это - нет
const у = 3 ;
f();
Когда мы определили функцию f переменная х уже существовала, а переменная у - еще нет. Затем мы объявили у и вызвали f.
Переменная х находится в области видимости тела функции f при ее вызове, а переменная у - нет. Это пример лексической
области видимости: у функции f есть доступ к идентификаторам, которые существовали на момент ее определения, но не на
момент вызова.
Лексическими в JavaScript являются глобальная область видимости (global scope), область видимости блока
(bосk scope) и области видимости функции (function scope).

ГЛОБАЛЬНАЯ ОБЛАСТЬ ВИДИМОСТИ

Область видимости имеет иерархический, древовидный характер. Та область видимости, в которой вы находитесь в момент
запуска программы, называется глобальной областью видимости (global scope). Вновь запущенная программа JavaScript
(прежде, чем будут вызваны любые функции) выполняется в глобальной области видимости. Таким образом, все, что вы
объявите в глобальной области видимости, будет доступно для всех областей видимости в вашей программе. Все, что
объявлено в глобальной области видимости, называется глобальными переменными, а у глобальных переменных, как известно,
очень плохая репутация.

ОБЛАСТЬ ВИДИМОСТИ БЛОКА

Ключевые слова let и const объявляют идентификаторы в области видимости блока (block scope). Блок - это список
операторов, заключенный в фигурные скобки. Поэтому, под областью видимости блока подразумеваются только те
идентификаторы, которые доступны в пределах блока.

console.log('пepeд блоком');
{
    console.log('внyтpи блока');
    const х = 3;
    console.log(x); // выводит 3
}
console.log(`зa пределами блока; х= ${х}`); // ReferenceError : х не определена

Это автономный блок (standalone bосk), обычно блок является частью оператора управления потоком, такого как if или for,
но это вполне допустимый синтаксис, блок может быть и автономным. Переменная х определяется в блоке, поэтому по
завершении блока она выходит из области видимости и считается неопределенной.



*/

let a;
{
    a = 3;
}
console.log(a); // 3


